#include "configurations.h"

int set_cell_expand(int rows, int cols,
										int m_cols, int m_rows,
										global const int * mat,
										global const int * sides)
						 {
							 int src_cols = cols;
							 int src_r = m_rows;
							 int src_c = m_cols;

							 if(sides[0] == 1){
								 if(m_cols == 0) return 0;
								 src_cols--;
								 src_c--;
							 }

							 if(sides[1] == 1){
								 if(m_cols == cols - 1) return 0;
								 src_cols--;
							 }

							 if(sides[2] == 1){
								 if(m_rows == 0) return 0;
								 src_r--;
							 }

							 if(sides[3] == 1){
								 if(m_rows == rows - 1) return 0;
							 }

							 return mat[(src_r*src_cols) + src_c];
}

//Init Kernel
kernel void init(global int * mat, int rows, int cols, char init)
{
	// primo indice => colonne
	int c = get_global_id(0);
	// secondo indice => righe
	int r = get_global_id(1);
	if (r < rows && c < cols){
		if(init == 'd'){
			diehard_setup(mat, rows, cols, c, r);
		}
		else if(init == 'g'){
			gosper_setup(mat, rows, cols, c, r);
		}
		else if(init == 'a'){
			acorn_setup(mat, rows, cols, c, r);
		}
	}
}

//Generation Kernel
kernel void generation(
	global int * restrict dst, /* matrice destinazione */
	global const int * restrict src, /* matrice sorgente */
	local int * cache, /* cache in local memory */
	// righe e colonne della matrice src
	int rows, int cols)
	{
		const int c = get_global_id(0);
		const int r = get_global_id(1);

		const int local_c = get_local_id(0);
		const int local_r = get_local_id(1);

		const int cache_c = local_c + 1;
		const int cache_r = local_r + 1;

		const int cache_cols = get_local_size(0) + 2;
		const int cache_rows = get_local_size(1) + 2;

		const int pos = r*cols + c;
		const int cache_pos = cache_r*cache_cols + cache_c;

		const bool inside = (r < rows && c < cols);

		cache[cache_pos] = inside ? src[pos] : 0;

		//Attributi dei vicini

		uint8 neib_pos = (uint8){
			inside && r != 0 ? pos - cols : UINT_MAX,
			inside && r != 0 && c < cols - 1 ? pos - cols + 1 : UINT_MAX,
			inside && c < cols - 1 ? pos + 1 : UINT_MAX,
			inside && c < cols - 1 && r < rows - 1 ? pos + cols + 1 : UINT_MAX,
			inside && r < rows - 1 ? pos + cols : UINT_MAX,
			inside && r < rows - 1 && c != 0 ? pos + cols - 1 : UINT_MAX,
			inside && c != 0 ? pos - 1 : UINT_MAX,
      inside && c != 0 && r != 0 ? pos - cols - 1 : UINT_MAX,
		};

		int8 local_border_status = (int8){
			local_r == 0,
			local_r == 0 && local_c == get_local_size(0) - 1,
			local_c == get_local_size(0) - 1,
			local_c == get_local_size(0) - 1 && local_r == get_local_size(1) - 1,
			local_r == get_local_size(1) - 1,
			local_r == get_local_size(1) - 1 && local_c == 0,
			local_c == 0,
			local_c == 0 && local_r == 0
		};

		uint8 local_neib_pos = (uint8){
			cache_pos - cache_cols,
			cache_pos - cache_cols + 1,
			cache_pos + 1,
			cache_pos + cache_cols + 1,
			cache_pos + cache_cols,
			cache_pos + cache_cols - 1,
			cache_pos - 1,
			cache_pos - cache_cols - 1
		};

		if(local_border_status.s0){
			cache[local_neib_pos.s0] = neib_pos.s0 == UINT_MAX ? 0 : src[neib_pos.s0];
		}
		if(local_border_status.s1){
			cache[local_neib_pos.s1] = neib_pos.s1 == UINT_MAX ? 0 : src[neib_pos.s1];
		}
		if(local_border_status.s2){
			cache[local_neib_pos.s2] = neib_pos.s2 == UINT_MAX ? 0 : src[neib_pos.s2];
		}
		if(local_border_status.s3){
			cache[local_neib_pos.s3] = neib_pos.s3 == UINT_MAX ? 0 : src[neib_pos.s3];
		}
		if(local_border_status.s4){
			cache[local_neib_pos.s4] = neib_pos.s4 == UINT_MAX ? 0 : src[neib_pos.s4];
		}
		if(local_border_status.s5){
			cache[local_neib_pos.s5] = neib_pos.s5 == UINT_MAX ? 0 : src[neib_pos.s5];
		}
		if(local_border_status.s6){
			cache[local_neib_pos.s6] = neib_pos.s6 == UINT_MAX ? 0 : src[neib_pos.s6];
		}
		if(local_border_status.s7){
			cache[local_neib_pos.s7] = neib_pos.s7 == UINT_MAX ? 0 : src[neib_pos.s7];
		}

		barrier(CLK_LOCAL_MEM_FENCE);

		if(!inside){
			return;
		}

		int cont=0;

		if(cache[local_neib_pos.s0] == 1) cont++;
		if(cache[local_neib_pos.s1] == 1) cont++;
		if(cache[local_neib_pos.s2] == 1) cont++;
		if(cache[local_neib_pos.s3] == 1) cont++;
		if(cache[local_neib_pos.s4] == 1) cont++;
		if(cache[local_neib_pos.s5] == 1) cont++;
		if(cache[local_neib_pos.s6] == 1) cont++;
		if(cache[local_neib_pos.s7] == 1) cont++;

		if(cache[cache_pos] == 1){
			if(cont < 2 || cont > 3){
				dst[r*cols + c] = 0;
			}
			else{
				dst[r*cols + c] = 1;
			}
		}
		else{
			if(cont == 3){
				dst[r*cols + c] = 1;
			}
			else{
				dst[r*cols + c] = 0;
			}
		}
	}

//Expansion Kernel
kernel void expand(
	global int * restrict dst, /* matrice destinazione */
	global const int * restrict src, /* matrice sorgente */
	global const int * restrict sides, /* array dei lati */
	// righe e colonne della matrice dst
	int rows, int cols)
	{
		const int c = get_global_id(0);
		const int r = get_global_id(1);
		if (r < rows && c < cols)
			dst[r*cols + c] = set_cell_expand(rows, cols, c, r, src, sides);
		return;
}

kernel void where_expand(
	global const int * restrict mat, //matrice sorgente
	global int * restrict sides,
	// righe e colonne della matrice
	int rows, int cols)
	{
		const int c = get_global_id(0);
		const int r = get_global_id(1);
		if (r < rows && c < cols){
				if(c == 0){
					if(mat[r*cols + c] == 1){
						sides[0] = 1;
					}
				}
				else if(c == cols - 1){
					if(mat[r*cols + c] == 1){
						sides[1] = 1;
					}
				}
				else if(r == 0){
					if(mat[r*cols + c] == 1){
						sides[2] = 1;
					}
				}
				else if(r == rows - 1){
					if(mat[r*cols + c] == 1){
						sides[3] = 1;
					}
				}
		}
		return;
	}
