#include "configurations.h"

//Function for setting every cell of EcoSystem
int set_cell(global const int * mat, int rows,
						 int cols, int m_cols, int m_rows, int cell)
						 {

							 int cont=0;
							 int start_rows = -1;
							 int start_cols = -1;
							 int end_rows = 2;
							 int end_cols = 2;

							 if(m_rows == 0){
								 start_rows = 0;
							 }
							 if(m_cols == 0){
								 start_cols = 0;
							 }
							 if(m_rows == rows - 1){
								 end_rows = 1;
							 }
							 if(m_cols == cols - 1){
								 end_cols = 1;
							 }

							 for(int i = start_rows; i < end_rows; i++){
								 for(int j = start_cols; j < end_cols; j++){
									 	if(i == 0 && j == 0){
											continue;
										}
										 if(mat[((m_rows + i)*cols) + (m_cols + j)] == 1){
											 cont++;
										 }
								 }
							 }

							 if(cell == 1){

								 if(cont < 2 || cont > 3){
									 return 0;
								 }
								 else{
									 return 1;
								 }
							 }
							 else{
								 if(cont == 3){
									 return 1;
								 }
								 else{
									 return 0;
								 }
							 }
}

kernel void init(global int * mat, int rows, int cols, char init)
{
	// primo indice => colonne
	int c = get_global_id(0);
	// secondo indice => righe
	int r = get_global_id(1);
	if (r < rows && c < cols){
		if(init == 'd'){
			diehard_setup(mat, rows, cols, c, r);
		}
		else if(init == 'g'){
			gosper_setup(mat, rows, cols, c, r);
		}
		else if(init == 'a'){
			acorn_setup(mat, rows, cols, c, r);
		}
	}
}

kernel void generation(
	global int * restrict dst, /* matrice destinazione */
	global const int * restrict src, /* matrice sorgente */
	// righe e colonne della matrice src
	int rows, int cols)
	{
		const int c = get_global_id(0);
		const int r = get_global_id(1);

		if (r < rows && c < cols)
			dst[r*cols + c] = set_cell(src, rows, cols, c, r, src[r*cols + c]);
		return;
	}
